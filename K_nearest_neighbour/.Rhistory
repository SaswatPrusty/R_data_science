abline(lm(Table_2.7$CLFPRM ~ Table_2.7$AHE82), col = "red")
plot(y = Table_2.7$CLFPRF , x = Table_2.7$AHE82)
abline(lm(Table_2.7$CLFPRF~ Table_2.7$AHE82), col = "red")
#Can you plot the labor force participation rate against the unemployment rate and the average hourly earnings simultaneously?
help(plot)
plot(y = Table_2.7$CLFPRM, x = Table_2.7$UNRM, z = Table_2.7$AHE )
help(persp)
persp(y = Table_2.7$CLFPRM, x = Table_2.7$UNRM, z = Table_2.7$AHE )
persp(x = Table_2.7$CLFPRM, y = Table_2.7$UNRM, z = Table_2.7$AHE )
Table_2.8 <- read.csv("C:/Users/HP/Desktop/Econometrics/Assignment/guj_dat_csv/guj_dat_csv/Table_2.8.csv")
View(Table_2.8)
plot(y = Table_2.8$foodexp, x = Table_2.8$totexp)
abline(lm(Table_2.8$foodexp ~ Table_2.8$totexp), col = "red")
inflation_US <- c()
for (x in 1: length(cpi$u.s.)-1){
inflation <- ((cpi$u.s.[x+1] - cpi$u.s.[x])/cpi$u.s.[x])*100
inflation_US <- c(inflation_US, inflation)
}
inflation_US
inflation_UK <- c()
for (x in 1: length(cpi$u.k.)-1){
inflation <- ((cpi$u.k.[x+1] - cpi$u.k.[x])/cpi$u.k.[x])*100
inflation_UK <- c(inflation_UK, inflation)
}
inflation_UK
inflation_japan <- c()
for (x in 1: length(cpi$japan)-1){
inflation <- ((cpi$japan[x+1] - cpi$japan[x])/cpi$japan[x])*100
inflation_japan <- c(inflation_japan, inflation)
}
inflation_japan
inflation_italy <- c()
for (x in 1: length(cpi$italy)-1){
inflation <- ((cpi$italy[x+1] - cpi$italy[x])/cpi$italy[x])*100
inflation_italy <- c(inflation_italy, inflation)
}
inflation_italy
inflation_germany <- c()
for (x in 1: length(cpi$germany)-1){
inflation <- ((cpi$germany[x+1] - cpi$germany[x])/cpi$germany[x])*100
inflation_germany <- c(inflation_germany, inflation)
}
inflation_germany
inflation_canada <- c()
for (x in 1: length(cpi$canada)-1){
inflation <- ((cpi$canada[x+1] - cpi$canada[x])/cpi$canada[x])*100
inflation_canada <- c(inflation_canada, inflation)
}
inflation_france <- c()
inflation_canada
inflation_of_all_country <- data.frame(inflation_canada, inflation_france, inflation_france, inflation_germany, inflation_italy, inflation_italy, inflation_japan, inflation_UK)
inflation_US <- c()
for (x in 1: length(cpi$u.s.)-1){
inflation <- ((cpi$u.s.[x+1] - cpi$u.s.[x])/cpi$u.s.[x])*100
inflation_US <- c(inflation_US, inflation)
}
inflation_US
inflation_of_all_country <- data.frame("inflation" = c(inflation_canada, inflation_france, inflation_germany, inflation_italy,  inflation_japan, inflation_UK, inflation_US)
"country" = c("Canada", "France", "Germany", "Italy", "Japan", "UK", "US"  )
)
inflation_of_all_country <- data.frame("inflation" = c(inflation_canada, inflation_france, inflation_germany, inflation_italy,  inflation_japan, inflation_UK, inflation_US ),
"country" = c("Canada", "France", "Germany", "Italy", "Japan", "UK", "US"  )
)
inflation_of_all_country <- data.frame("Canada" = inflation_canada)
inflation_of_all_country <- data.frame("Canada" = inflation_canada,
"France" = inflation_france)
inflation_of_all_country <- data.frame("Canada" = c(inflation_canada),
"France" = c(inflation_france))
View(inflation_UK)
inflation_of_all_country <- data.frame("Canada" = c(inflation_canada))
inflation_of_all_country
View(inflation_of_all_country)
inflation_of_all_country <- data.frame("Canada" = c(inflation_canada),
"France" = c(inflation_france))
inflation_UK
inflation_of_all_country <- data.frame("Canada" = c(inflation_canada),
"France" = c(inflation_france))
inflation_of_all_country <- data.frame("Canada" = inflation_canada,
"France" = inflation_france)
inflation_of_all_country <- data.frame("Canada" = c(inflation_canada),
"France" = c(inflation_france))
inflation_of_all_country <- data.frame(colnames = c("Canada", "france"),
values = c(inflation_canada, inflation_france))
inflation_of_all_country
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( c("Canada", "france"),
c(inflation_canada, inflation_france))
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( "Country" : c("Canada", "france"),
"Inflation" :c(inflation_canada, inflation_france))
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( "Country" =c("Canada", "france"),
"Inflation" =c(inflation_canada, inflation_france))
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( "Canada"= c(inflation_canada),
"France" = c(inflation_france))
inflation_of_all_country <- data.frame( "Canada":c(inflation_canada),
"France" : c(inflation_france))
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( Canada = c(inflation_canada),
France = c(inflation_france))
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( Canada = c(inflation_canada))
View(inflation_of_all_country)
inflation_of_all_country <- data.frame( Canada = c(inflation_canada),
France = c(inflation_france))
Canada <- c(inflation_canada)
France <- c(inflation_france)
inflation_of_all_country <-data.frame(Canada, France)
France <- c(inflation_france)
France
Canada <- c(inflation_canada)
Canada
for (x in 1: length(cpi$france)-1){
inflation <- (cpi$france[x+1] - cpi$france[x])/cpi$france[x]
inflation_france <- c(inflation_france, inflation)
}
inflation_france
Canada <- c(inflation_canada)
France <- c(inflation_france)
inflation_of_all_country <-data.frame(Canada, France)
inflation_US <- c()
for (x in 1: length(cpi$u.s.)-1){
inflation <- ((cpi$u.s.[x+1] - cpi$u.s.[x])/cpi$u.s.[x])*100
inflation_US <- c(inflation_US, inflation)
}
inflation_US
US <- c(inflation_US)
inflation_of_all_country <-data.frame(Canada, France, Italy, Germany, UK, US)
Italy <- c(inflation_italy)
inflation_of_all_country <-data.frame(Canada, France, Italy, Germany, UK, US)
Canada <- c(inflation_canada)
France <- c(inflation_france)
Italy <- c(inflation_italy)
Germany <- c(inflation_germany)
UK <- c(inflation_UK)
Japan <- c(inflation_japan)
inflation_of_all_country <-data.frame(Canada, France, Italy, Germany, UK, US)
inflation_of_all_country
View(inflation_of_all_country)
inflation_of_all_country
plot(y= inflation_US, x = cpi$year[2:25])
abline(lm(inflation_US ~ cpi$year[2:25]), col = "red")
plot(x= inflation_US, y = cpi$year[2:25])
abline(lm(inflation_US ~ cpi$year[2:25]), col = "red")
plot(y= inflation_US, x = cpi$year[2:25])
abline(lm(inflation_US ~ cpi$year[2:25]), col = "red")
plot(y= inflation_UK, x = cpi$year[2:25])
abline(lm(inflation_US ~ cpi$year[2:25]), col = "red")
cpi$year
plot(y= inflation_US, x = cpi$year)
abline(lm(inflation_US ~ cpi$year), col = "red")
plot(y= inflation_US, x = cpi$year[2:24])
abline(lm(inflation_US ~ cpi$year), col = "red")
cpi$year
#Plot the inflation rate for each country against time (i.e., use the horizontal axis for time and the vertical axis for the inflation rate.)
inflation_US
plot(y= inflation_US, x = cpi$year[2:25])
abline(lm(inflation_US ~ cpi$year[2:25]), col = "red")
plot(y= inflation_US, x = cpi$year[2:25])
plot(y= inflation_UK, x = cpi$year[2:25])
plot(y= inflation_germany, x = cpi$year[2:25])
getwd()
plot(y = Table_1.3$Canada, x = Table_1.3$obs)
abline(lm(Table_1.3$Canada ~ Table_1.3$obs), col = "red")
plot(y = Table_1.3$Canada, x = Table_1.3$obs, ylab = "Inflation Canada", xlab = "Year")
abline(lm(Table_1.3$Canada ~ Table_1.3$obs), col = "red")
plot(y = Table_1.3$France, x = Table_1.3$obs, ylab = "Inflation France", xlab = "Year")
abline(lm(Table_1.3$France ~ Table_1.3$obs), col = "red")
plot(y = inflation_canada, x = inflation_US)
abline(lm(inflation_US ~ inflation_canada), col = "red")
plot(y = inflation_france, x = inflation_US)
abline(lm(inflation_US ~ inflation_france), col = "red")
plot(y = inflation_france, x = inflation_US)
abline(lm(inflation_US ~ inflation_france), col = "red")
abline(lm(inflation_US ~ inflation_france), col = "red")
plot(y = inflation_canada, x = inflation_US)
abline(lm(inflation_US ~ inflation_canada), col = "red")
plot(y = inflation_france, x = inflation_US)
abline(lm(inflation_US ~ inflation_france), col = "red")
inflation_france <- c()
for (x in 1: length(cpi$france)-1){
inflation <- (cpi$france[x+1] - cpi$france[x])/cpi$france[x]
inflation_france <- c(inflation_france, inflation)
}
inflation_france
inflation_france <- c()
for (x in 1: length(cpi$france)-1){
inflation <- ((cpi$france[x+1] - cpi$france[x])/cpi$france[x])*100
inflation_france <- c(inflation_france, inflation)
}
inflation_france
plot(y = inflation_france, x = inflation_US)
abline(lm(inflation_US ~ inflation_france), col = "red")
plot(y = inflation_germany, x = inflation_US)
abline(lm(inflation_US ~ inflation_germany), col = "red")
plot(y = inflation_italy, x = inflation_US)
abline(lm(inflation_US ~ inflation_italy), col = "red")
plot(y = inflation_japan, x = inflation_US)
abline(lm(inflation_US ~ inflation_japan), col = "red")
plot(y = inflation_UK, x = inflation_US)
abline(lm(inflation_US ~ inflation_UK), col = "red")
plot(y = inflation_japan, x = inflation_US)
abline(lm(inflation_US ~ inflation_japan), col = "red")
rbinom(1, 100, 0.5)
rbinom(10, 100, 0.5)
rbinom(10, 100, 0.5)
source("~/.active-rstudio-document", echo=TRUE)
rbinom(100, 10, 0.5)
rbinom(1,100, 0.5)
x <- seq(0,100,by = 1)
y <- dbinom(x,100,0.5)
plot(x,y)
y
rbinom(1,100, 0.5)
rbinom(100, 10, 0.5)
rbinom(100, 1, 0.5)
help("rbinom")
mean(rbinom(100, 1, 0.5))
pnorm(10000, 600, 200)
pnorm(10000, 9600, 3200)
1 - pnorm(10000, 9600, 3200)
`Cell_phones(1)` <- read.csv("C:/Users/HP/Desktop/Advanced Statistics/Sampling/Cell_phones(1).xlsx", sep="")
View(`Cell_phones(1)`)
getwd()
getwd()
library(readxl)
Cell_phones_1_ <- read_excel("C:/Users/HP/Desktop/Advanced Statistics/Sampling/Cell_phones(1).xlsx")
View(Cell_phones_1_)
`Cell_phones(1)`
Cell_phones_1_
mean(Cell_phones_1_$Time)
library(readxl)
fastfood <- read_excel("C:/Users/HP/Desktop/Advanced Statistics/Sampling/fastfood.xlsx")
View(fastfood)
mean(fastfood$Pedestrians)
mosaic::xpt(-1.8075, df = 39)
mosaic::xpt(-1.621, df = 14)
rbinom(100, 1, 0.5)
rbinom(1000, 1, 0.13)
pop <- rbinom(1000, 1, 0.13)
sample_pop <- sample(pop, 450, FALSE, 0.15)
sample_pop <- sample(pop, 450, FALSE, pron = 0.15)
sample_pop <- sample(pop, 450, FALSE, prob = 0.15)
sample_pop <- sample(x= pop, size = 450, replace = FALSE, prob = 0.15)
class(pop)
pop <- as.vector(rbinom(1000, 1, 0.13))
class(pop)
sample_pop <- sample(x= pop, size = 450, replace = FALSE, prob = 0.15)
sample_pop <- sample(x= pop, size = 450, replace = FALSE, prob = 0.13)
sample_pop <- sample(x= pop, size = 450, replace = FALSE)
sample_pop
1 - pbinom(15, 450, 0.13 )
1 - pbinom(15, size = 450, 0.13 )
1 - pbinom( n = 15, size = 450, 0.13 )
1 - pbinom( 450, 15, 0.13 )
pbinom( 450, 15, 0.13 )
pbinom( 15, 450, 0.13 )
pbinom( 0.15, 450, 0.13 )
1 - pbinom( 0.15, 450, 0.13 )
1 - pbinom( 68, 450, 0.13 )
dist <- rbinom(100, 1, 0.5)
dist
class(dist)
if(dist > 0 , 10 , 0)
dist_new <- replace(dist, dist ==1, 10)
dist_new
class(dist_new)
as.factor(dist_new)
mean(as.factor(dist_new))
mean(as.factor(dist_new))
sum(as.factor(dist_new))
(as.factor(dist_new))
summary(as.factor(dist_new))
dist_inf <- rbinom(100000000000000000000, 1, 0.5)
dist_inf <- rbinom(10000000000000, 1, 0.5)
mean(dist_inf)
dist_inf <- rbinom(100000000, 1, 0.5)
mean(dist_inf)
sample(dist_new, 6)
sample(dist_new, 6)
summary(sample(dist_new, 6))
summary(as.factor(sample(dist_new, 6)))
dist_inf <- rbinom(100000000, 1, 0.5)
dist_inf <- rbinom(100000000, 1, 0.5)
summary(as.factor(sample(dist_new, 6)))
summary(as.factor(sample(dist_new, 6)))
summary(as.factor(sample(dist_new, 6)))
summary(as.factor(sample(dist_new, 6)))
summary(as.factor(sample(dist_new, 6)))
mosaic::do(500)* {
Sample.data <- data.frame(x =as.factor(sample(dist_new, 6)))
Sample.data %>% summarise(xbar = mean(x))
}
Sample.data <- data.frame(x =(sample(dist, 6)))
mosaic::do(500)* {
Sample.data <- data.frame(x =(sample(dist, 6)))
Sample.data %>% summarise(xbar = mean(x))
}
samp_dist <- mosaic::do(500)* {
Sample.data <- data.frame(x =(sample(dist, 6)))
Sample.data %>% summarise(xbar = mean(x))
}
library(ggplot2)
ggplot() + geom_histogram(data = samp_dist, aes(x = xbar, y =..density..))
1 - pbinom( 67, 450, 0.13 )
dist <- rbinom(100, 1, 0.5)
dist_new <- replace(dist, dist ==1, 10)
summary(as.factor(dist_new))
summary(as.factor(dist_new))
summary(as.factor(sample(dist_new, 6)))
summary(as.factor(dist_new))
summary(as.factor(dist_new))
summary(as.factor(dist_new))
summary(as.factor(dist_new))
summary(as.factor(dist_new))
dist <- rbinom(100, 1, 0.5)
dist_new <- replace(dist, dist ==1, 10)
summary(as.factor(dist_new))
dist <- rbinom(100, 1, 0.5)
dist_new <- replace(dist, dist ==1, 10)
summary(as.factor(dist_new))
summary(as.factor(dist_new))
dist_inf <- rbinom(100000000, 1, 0.5)
mean(dist_inf)
summary(as.factor(dist_inf))
dist_inf <- replace(dist_inf, dist ==1, 10)
summary(as.factor(dist_inf))
sample(dist, 6)
sample(dist_new, 6)
sample(dist_new, 6)
samp_dist <- mosaic::do(500)* {
Sample.data <- data.frame(x =(sample(dist, 6)))
Sample.data %>% summarise(xbar = mean(x))
}
library(ggplot2)
ggplot() + geom_histogram(data = samp_dist, aes(x = xbar, y =..density..))
1 - pnorm(10000, 9600, 3200)
1 - pbinom( 67, 450, 0.13 )
mean(Cell_phones_1_$Time)
mosaic::xpt(-1.8075, df = 39)
mower_df <- read.csv("RidingMowers.csv")
setwd("C:/Users/HP/Desktop/Business Analytics with R/week 5")
mower_df <- read.csv("RidingMowers.csv")
View(mower_df)
utilities.df <- read.csv("Utilities.csv")
# set row names in utilities.df to values stored in the Company name column
row.names(utilities.df) <- utilities.df[,1]
View(utilities.df)
# remove the Company name column
utilities.df <- utilities.df[,-c(1)]
View(utilities.df)
#get the first seven rows of the dataframe to illustrate calculations
utilities.df.first <- utilities.df[1:7,]
View(utilities.df.first)
#get the first seven rows of the dataframe to illustrate calculations
utilities.df.first <- utilities.df[1:7,]
View(utilities.df.first)
# compute Euclidean distance using all seven variables to further illustrate calculations
d.all <- dist(utilities.df.first, method = "euclidean")
print(d.all)
utilities.df.first <- scale(utilities.df.first)
View(utilities.df.first)
# compute Euclidean distance using all seven variables to further illustrate calculations
d.all <- dist(utilities.df.first, method = "euclidean")
print(d.all)
#set k = 6 to create 6 clusters.  The nstart paramater specifies the number of times to run the cluster analysis with
#different starting points (seeds).
kmu <- kmeans(scale(utilities.df), 4, nstart = 100)
# show cluster membership
View(kmu$cluster)
write.csv(kmu$cluster, "clusters.csv")
# get centroids
View(kmu$centers)
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu$centers), max(kmu$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n = 6
for (i in c(1:6))
lines(kmu$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
# name clusters
text(x = 0.5, y = kmu$centers[, 1], labels = paste("Cluster", c(1:4)))
#distance between centers
dist(kmu$centers)
#set k = 6 to create 6 clusters.  The nstart paramater specifies the number of times to run the cluster analysis with
#different starting points (seeds).
kmu <- kmeans(scale(utilities.df), 4, nstart = 1)
# show cluster membership
View(kmu$cluster)
write.csv(kmu$cluster, "clusters.csv")
# get centroids
View(kmu$centers)
write.csv(kmu$centers, "clustercenters.csv")
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu$centers), max(kmu$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n = 6
for (i in c(1:6))
lines(kmu$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
print(sort(kmu$cluster))
#set k = 6 to create 6 clusters.  The nstart paramater specifies the number of times to run the cluster analysis with
#different starting points (seeds).
kmu <- kmeans(scale(utilities.df), 4, nstart = 100)
print(sort(kmu$cluster))
#Create an elbow chart to select the best k
#Elbow chart calculates the weighted sum of squares for each cluster.
#Look for change in slope from steep to flat
library(factoextra)
fviz_nbclust(scale(utilities.df), kmeans, method = "wss") + theme_minimal() + ggtitle("Elbow Chart")
#based on elbow chart, set k = 5
kmu5 <- kmeans(scale(utilities.df), 5, nstart = 100)
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu5$centers), max(kmu5$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n =
for (i in c(1:5))
lines(kmu5$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
# name clusters
text(x = 0.5, y = kmu5$centers[, 1], labels = paste("Cluster", c(1:5)))
#based on elbow chart, set k = 5
kmu5 <- kmeans(scale(utilities.df), 5, nstart = 100)
print(kmu5$centers)
print(dist(kmu5$centers))
#based on elbow chart, set k = 5
kmu5 <- kmeans(scale(utilities.df), 3, nstart = 100)
print(kmu5$centers)
print(dist(kmu5$centers))
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu5$centers), max(kmu5$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n =
for (i in c(1:5))
lines(kmu5$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
# name clusters
text(x = 0.5, y = kmu5$centers[, 1], labels = paste("Cluster", c(1:5)))
#based on elbow chart, set k = 5
kmu5 <- kmeans(scale(utilities.df), 3, nstart = 100)
print(kmu5$centers)
print(dist(kmu5$centers))
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu5$centers), max(kmu5$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
lines(kmu5$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 2, 3),
"black", "dark grey"))
#based on elbow chart, set k = 5
kmu5 <- kmeans(scale(utilities.df), 5, nstart = 100)
print(kmu5$centers)
print(dist(kmu5$centers))
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu5$centers), max(kmu5$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n =
for (i in c(1:5))
lines(kmu5$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
# name clusters
text(x = 0.5, y = kmu5$centers[, 1], labels = paste("Cluster", c(1:5)))
#create a plot of the clusters using fviz.  If more than 2 variables are used, fviz uses the
#first two principal components for the x and y axis
fviz_cluster(kmu5, data = utilities.df)
#set k = 6 to create 6 clusters.  The nstart paramater specifies the number of times to run the cluster analysis with
#different starting points (seeds).
kmu <- kmeans((utilities.df), 5, nstart = 100)
# show cluster membership
View(kmu$cluster)
print(kmu$centers)
dist(kmu$centers)
?fviz_cluster
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu5$centers), max(kmu5$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n =
for (i in c(1:5))
lines(kmu5$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
fviz_cluster(kmu, data = utilities.df, stand = FALSE)
fviz_cluster(kmu5, data = utilities.df)
fviz_cluster(kmu, data = utilities.df, stand = FALSE)
fviz_cluster(kmu5, data = utilities.df)
fviz_cluster(kmu, data = utilities.df, stand = FALSE)
kmu <- kmeans((utilities.df), 5, nstart = 100)
# plot an empty scatter plot
plot(c(0), xaxt = 'n', ylab = "", type = "l",
ylim = c(min(kmu$centers), max(kmu$centers)), xlim = c(0, 8))
# label x-axes
axis(1, at = c(1:8), labels = names(utilities.df))
# plot centroids for n = 6
for (i in c(1:6))
lines(kmu$centers[i,], lty = i, lwd = 2, col = ifelse(i %in% c(1, 3, 5),
"black", "dark grey"))
# name clusters
text(x = 0.5, y = kmu$centers[, 1], labels = paste("Cluster", c(1:4)))
